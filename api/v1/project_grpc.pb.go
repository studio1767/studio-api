// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/v1/project.proto

package api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudioClient is the client API for Studio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudioClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	CreateProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*Project, error)
	Projects(ctx context.Context, in *ProjectFilter, opts ...grpc.CallOption) (Studio_ProjectsClient, error)
}

type studioClient struct {
	cc grpc.ClientConnInterface
}

func NewStudioClient(cc grpc.ClientConnInterface) StudioClient {
	return &studioClient{cc}
}

func (c *studioClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/api.v1.Studio/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioClient) CreateProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/api.v1.Studio/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioClient) Projects(ctx context.Context, in *ProjectFilter, opts ...grpc.CallOption) (Studio_ProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Studio_ServiceDesc.Streams[0], "/api.v1.Studio/Projects", opts...)
	if err != nil {
		return nil, err
	}
	x := &studioProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Studio_ProjectsClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type studioProjectsClient struct {
	grpc.ClientStream
}

func (x *studioProjectsClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudioServer is the server API for Studio service.
// All implementations must embed UnimplementedStudioServer
// for forward compatibility
type StudioServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	CreateProject(context.Context, *ProjectRequest) (*Project, error)
	Projects(*ProjectFilter, Studio_ProjectsServer) error
	mustEmbedUnimplementedStudioServer()
}

// UnimplementedStudioServer must be embedded to have forward compatible implementations.
type UnimplementedStudioServer struct {
}

func (UnimplementedStudioServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStudioServer) CreateProject(context.Context, *ProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedStudioServer) Projects(*ProjectFilter, Studio_ProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method Projects not implemented")
}
func (UnimplementedStudioServer) mustEmbedUnimplementedStudioServer() {}

// UnsafeStudioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudioServer will
// result in compilation errors.
type UnsafeStudioServer interface {
	mustEmbedUnimplementedStudioServer()
}

func RegisterStudioServer(s grpc.ServiceRegistrar, srv StudioServer) {
	s.RegisterService(&Studio_ServiceDesc, srv)
}

func _Studio_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Studio/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studio_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Studio/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServer).CreateProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studio_Projects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudioServer).Projects(m, &studioProjectsServer{stream})
}

type Studio_ProjectsServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type studioProjectsServer struct {
	grpc.ServerStream
}

func (x *studioProjectsServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

// Studio_ServiceDesc is the grpc.ServiceDesc for Studio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Studio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Studio",
	HandlerType: (*StudioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Studio_Ping_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Studio_CreateProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Projects",
			Handler:       _Studio_Projects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/project.proto",
}
